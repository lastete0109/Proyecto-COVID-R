metricas$DEPARTAMENTO,
metricas$TOTAL_I,
metricas$FEMENINO_I,
metricas$MASCULINO_I,
metricas$PICO,
metricas$INFECTADOS_AYER,
metricas$TOTAL_F) %>% lapply(htmltools::HTML)
if(length(depart_selecc)==1)
{leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 2,
opacity = 0.6,
data=data_selecc,
label = labels,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"),
layerId = ~NOMBDEP)}
else{
paleta = colorNumeric("viridis",domain=data_selecc@data$TOTAL_I)
leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color=~paleta(TOTAL_I),
weight = 2,
opacity = 0.6,
data=data_selecc,
label = labels,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"),
layerId = ~NOMBDEP)%>%
addLegend(pal = paleta, values = ~TOTAL_I, opacity = 0.7, title = "Cantidad de <br/>Infectados",
position = "bottomright",data=data_selecc)
}
}
if(analisis=='Provincial'){
req(input$Departamento)
req(input$Provincia)
prov_selecc = input$Provincia
data_selecc = data_prov[data_prov$NOMBPROV %in% prov_selecc &
data_prov$FIRST_NOMB %in% input$Departamento,]
metricas = fx_metricas("PROVINCIA",prov_selecc)
data_selecc@data =  data_selecc@data %>% left_join(metricas,by= c("NOMBPROV"="PROVINCIA"))  %>%
mutate(LABEL=pmap(list(a=NOMBPROV,b=TOTAL_I,c=FEMENINO_I,d=MASCULINO_I,
e=PICO_INF,f=INFECTADOS_AYER,g=TOTAL_F),
function(a,b,c,d,e,f,g){
htmltools::HTML(sprintf("<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
a,b,c,d,e,ifelse(is.na(f),0,f),g))}))
print(data_selecc@data)
if(length(input$Provincia)==1){
leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 2,
opacity = 0.6,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"),
layerId = ~NOMBPROV)}
else{
paleta = colorNumeric("viridis",domain=data_selecc@data$TOTAL_I)
leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 2,
opacity = 0.6,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"),
layerId = ~NOMBPROV)%>%
addLegend(pal = paleta, values = ~TOTAL_I, opacity = 0.7, title = "Cantidad de <br/>Infectados",
position = "bottomright",data=data_selecc)
}
}
if(analisis=='Distrital'){
req(input$Departamento)
req(input$Provincia)
req(input$Distrito)
dist_selecc = input$Distrito
data_selecc = data_distrital[data_distrital$NOMBDIST %in% dist_selecc &
data_distrital$NOMBPROV %in% input$Provincia &
data_distrital$NOMBDEP %in% input$Departamento,]
metricas = fx_metricas("DISTRITO",dist_selecc)
data_selecc@data =  data_selecc@data %>%
left_join(metricas,by= c("NOMBDIST"="DISTRITO"))  %>%
mutate(LABEL=pmap(list(a=NOMBDIST,b=TOTAL_I,c=FEMENINO_I,d=MASCULINO_I,
e=PICO_INF,f=INFECTADOS_AYER,g=TOTAL_F),
function(a,b,c,d,e,f,g){
htmltools::HTML(sprintf("<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
a,b,c,d,e,ifelse(is.na(f),0,f),g))}
))
if(length(input$Distrito)==1){
leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 2,
opacity = 0.6,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"),
layerId = ~NOMBDIST)}
else{
paleta = colorNumeric("viridis",domain=data_selecc@data$TOTAL_I)
leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color=~paleta(TOTAL_I),
weight = 2,
opacity = 0.6,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"))%>%
addLegend(pal = paleta, values = ~TOTAL_I, opacity = 0.7, title = "Cantidad de <br/>Infectados",
position = "bottomright",data=data_selecc)
}
}
})
observe({
provincias = data_distrital@data %>% filter(NOMBDEP %in% input$Departamento) %>%
`$`('NOMBPROV') %>% unique() %>% sort()
stillSelected<-isolate(input$Provincia[input$Provincia %in% provincias])
updatePickerInput(session,"Provincia",choices=provincias,
selected=stillSelected) })
observe({
distritos = data_distrital@data %>% filter(NOMBPROV %in% input$Provincia) %>%
`$`('NOMBDIST') %>% unique() %>% sort()
stillSelected<-isolate(input$Distrito[input$Distrito %in% distritos])
updatePickerInput(session,"Distrito",choices=distritos,
selected=stillSelected)
})
id_poligono = reactive({
req(input$mapa_shape_click)
input$mapa_shape_click$id
})
output$grafica = renderImage({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando gif')
if(analisis=="Departamental"){
departamento = id_poligono()
grafica = fx_graficas("DEPARTAMENTO",departamento)
list(src = "outfile.gif",
contentType = 'image/gif') }
else if(analisis=="Distrital"){
distrito = id_poligono()
grafica = fx_graficas("DISTRITO",distrito)
list(src = "outfile.gif",
contentType = 'image/gif') }
else{
provincia = id_poligono()
grafica = fx_graficas("PROVINCIA",provincia)
list(src = "outfile.gif",
contentType = 'image/gif') }
},deleteFile = TRUE)
output$grafica2 = renderPlot({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando grÃ¡fica')
if(analisis=="Departamental"){
departamento = id_poligono()
fx_graficas2("DEPARTAMENTO",departamento)}
else if(analisis=="Distrital"){
distrito = id_poligono()
fx_graficas2("DISTRITO",distrito)}
else{
provincia = id_poligono()
fx_graficas2("PROVINCIA",provincia)}
})
}
shinyApp(ui = ui, server = server)
# Codigo de servidor
server <- function(input, output,session){
output$mapa <- renderLeaflet({
leaflet() %>%
addTiles(attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
setView( lng = -75.648748 , lat= -9.802423 ,zoom=5)
})
observe({
req(input$Analisis)
analisis = input$Analisis
if(analisis=='Departamental'){
req(input$Departamento)
depart_selecc = input$Departamento
data_selecc = data_depart[data_depart$NOMBDEP %in% depart_selecc,]
metricas = fx_metricas("DEPARTAMENTO",depart_selecc)
data_selecc@data =  data_selecc@data %>% left_join(metricas,by= c("NOMBDEP"="DEPARTAMENTO"))
labels = sprintf(
"<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
metricas$DEPARTAMENTO,
metricas$TOTAL_I,
metricas$FEMENINO_I,
metricas$MASCULINO_I,
metricas$PICO,
metricas$INFECTADOS_AYER,
metricas$TOTAL_F) %>% lapply(htmltools::HTML)
if(length(depart_selecc)==1)
{leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 2,
opacity = 0.6,
data=data_selecc,
label = labels,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"),
layerId = ~NOMBDEP)}
else{
paleta = colorNumeric("viridis",domain=data_selecc@data$TOTAL_I)
leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color=~paleta(TOTAL_I),
weight = 2,
opacity = 0.6,
data=data_selecc,
label = labels,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"),
layerId = ~NOMBDEP)%>%
addLegend(pal = paleta, values = ~TOTAL_I, opacity = 0.7, title = "Cantidad de <br/>Infectados",
position = "bottomright",data=data_selecc)
}
}
if(analisis=='Provincial'){
req(input$Departamento)
req(input$Provincia)
prov_selecc = input$Provincia
data_selecc = data_prov[data_prov$NOMBPROV %in% prov_selecc &
data_prov$FIRST_NOMB %in% input$Departamento,]
metricas = fx_metricas("PROVINCIA",prov_selecc)
data_selecc@data =  data_selecc@data %>% left_join(metricas,by= c("NOMBPROV"="PROVINCIA"))  %>%
mutate(LABEL=pmap(list(a=NOMBPROV,b=TOTAL_I,c=FEMENINO_I,d=MASCULINO_I,
e=PICO_INF,f=INFECTADOS_AYER,g=TOTAL_F),
function(a,b,c,d,e,f,g){
htmltools::HTML(sprintf("<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
a,b,c,d,e,ifelse(is.na(f),0,f),g))}))
print(data_selecc@data)
if(length(input$Provincia)==1){
leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 2,
opacity = 0.6,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"),
layerId = ~NOMBPROV)}
else{
paleta = colorNumeric("viridis",domain=data_selecc@data$TOTAL_I)
leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color=~paleta(TOTAL_I),
weight = 2,
opacity = 0.6,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"),
layerId = ~NOMBPROV)%>%
addLegend(pal = paleta, values = ~TOTAL_I, opacity = 0.7, title = "Cantidad de <br/>Infectados",
position = "bottomright",data=data_selecc)
}
}
if(analisis=='Distrital'){
req(input$Departamento)
req(input$Provincia)
req(input$Distrito)
dist_selecc = input$Distrito
data_selecc = data_distrital[data_distrital$NOMBDIST %in% dist_selecc &
data_distrital$NOMBPROV %in% input$Provincia &
data_distrital$NOMBDEP %in% input$Departamento,]
metricas = fx_metricas("DISTRITO",dist_selecc)
data_selecc@data =  data_selecc@data %>%
left_join(metricas,by= c("NOMBDIST"="DISTRITO"))  %>%
mutate(LABEL=pmap(list(a=NOMBDIST,b=TOTAL_I,c=FEMENINO_I,d=MASCULINO_I,
e=PICO_INF,f=INFECTADOS_AYER,g=TOTAL_F),
function(a,b,c,d,e,f,g){
htmltools::HTML(sprintf("<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
a,b,c,d,e,ifelse(is.na(f),0,f),g))}
))
if(length(input$Distrito)==1){
leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 2,
opacity = 0.6,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"),
layerId = ~NOMBDIST)}
else{
paleta = colorNumeric("viridis",domain=data_selecc@data$TOTAL_I)
leafletProxy("mapa") %>%
clearControls()%>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color=~paleta(TOTAL_I),
weight = 2,
opacity = 0.6,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "14px",
direction = "auto"))%>%
addLegend(pal = paleta, values = ~TOTAL_I, opacity = 0.7, title = "Cantidad de <br/>Infectados",
position = "bottomright",data=data_selecc)
}
}
})
observe({
provincias = data_distrital@data %>% filter(NOMBDEP %in% input$Departamento) %>%
`$`('NOMBPROV') %>% unique() %>% sort()
stillSelected<-isolate(input$Provincia[input$Provincia %in% provincias])
updatePickerInput(session,"Provincia",choices=provincias,
selected=stillSelected) })
observe({
distritos = data_distrital@data %>% filter(NOMBPROV %in% input$Provincia) %>%
`$`('NOMBDIST') %>% unique() %>% sort()
stillSelected<-isolate(input$Distrito[input$Distrito %in% distritos])
updatePickerInput(session,"Distrito",choices=distritos,
selected=stillSelected)
})
id_poligono = reactive({
req(input$mapa_shape_click)
input$mapa_shape_click$id
})
output$grafica = renderImage({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando gif')
if(analisis=="Departamental"){
departamento = id_poligono()
grafica = fx_graficas("DEPARTAMENTO",departamento)
list(src = "outfile.gif",
contentType = 'image/gif') }
else if(analisis=="Distrital"){
distrito = id_poligono()
grafica = fx_graficas("DISTRITO",distrito)
list(src = "outfile.gif",
contentType = 'image/gif') }
else{
provincia = id_poligono()
grafica = fx_graficas("PROVINCIA",provincia)
list(src = "outfile.gif",
contentType = 'image/gif') }
},deleteFile = TRUE)
output$grafica2 = renderPlot({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando grÃ¡fica')
if(analisis=="Departamental"){
departamento = id_poligono()
fx_graficas2("DEPARTAMENTO",departamento)}
else if(analisis=="Distrital"){
distrito = id_poligono()
fx_graficas2("DISTRITO",distrito)}
else{
provincia = id_poligono()
fx_graficas2("PROVINCIA",provincia)}
})
}
shinyApp(ui = ui, server = server)
library(rsconnect)
rsconnect::setAccountInfo(name='lastete0109',
token='AE0DFF998A2EB39F264CFDA386F7103C',
secret='RTF2KSa97gLOAclWJNN4mBFv/6Y4j0ZzY+kySvd+')
rsconnect::deployApp("C://Users//Leo//Desktop//Covid-Peru")
library(rsconnect)
rsconnect::setAccountInfo(name='lastete0109',
token='AE0DFF998A2EB39F264CFDA386F7103C',
secret='RTF2KSa97gLOAclWJNN4mBFv/6Y4j0ZzY+kySvd+')
rsconnect::deployApp("C://Users//Leo//Desktop//Covid-Peru")
library(rsconnect)
rsconnect::setAccountInfo(name='lastete0109',
token='AE0DFF998A2EB39F264CFDA386F7103C',
secret='RTF2KSa97gLOAclWJNN4mBFv/6Y4j0ZzY+kySvd+')
rsconnect::deployApp("C://Users//Leo//Desktop//Covid-Peru")
library(rsconnect)
rsconnect::setAccountInfo(name='lastete0109',
token='AE0DFF998A2EB39F264CFDA386F7103C',
secret='RTF2KSa97gLOAclWJNN4mBFv/6Y4j0ZzY+kySvd+')
rsconnect::deployApp("C://Users//Leo//Desktop//Covid-Peru")

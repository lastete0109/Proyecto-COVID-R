Fallecidos totales: %d <br/>",
metricas$DEPARTAMENTO,
metricas$TOTAL_I,
metricas$FEMENINO_I,
metricas$MASCULINO_I,
metricas$PICO,
metricas$INFECTADOS_AYER,
metricas$TOTAL_F) %>% lapply(htmltools::HTML)
leafletProxy("mapa") %>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 1,
data=data_selecc,
label = labels,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "12px",
direction = "auto"),
layerId = ~NOMBDEP)
}
if(analisis=='Distrital'){
req(input$Distrito)
dist_selecc = input$Distrito
data_selecc = data_distrital[data_distrital$NOMBDIST %in% dist_selecc,]
metricas = fx_metricas("DISTRITO",dist_selecc)
data_selecc@data =  data_selecc@data %>%
left_join(metricas,by= c("NOMBDIST"="DISTRITO"))  %>%
mutate(LABEL=pmap(list(a=NOMBDIST,b=TOTAL_I,c=FEMENINO_I,d=MASCULINO_I,
e=PICO_INF,f=INFECTADOS_AYER,g=TOTAL_F),
function(a,b,c,d,e,f,g){
htmltools::HTML(sprintf("<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
a,b,c,d,e,ifelse(is.na(f),0,f),g))}
))
leafletProxy("mapa") %>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 1,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "12px",
direction = "auto"),
layerId = ~NOMBDIST)
}
})
observe({
provincias = data_distrital@data %>% filter(NOMBDEP %in% input$Departamento) %>%
`$`('NOMBPROV') %>% unique() %>% sort()
stillSelected<-isolate(input$Provincia[input$Provincia %in% provincias])
updateSelectizeInput(session,"Provincia",choices=provincias,
selected=stillSelected,server=T) })
observe({
distritos = data_distrital@data %>% filter(NOMBPROV %in% input$Provincia) %>%
`$`('NOMBDIST') %>% unique() %>% sort()
stillSelected<-isolate(input$Distrito[input$Distrito %in% distritos])
updateSelectizeInput(session,"Distrito",choices=distritos,
selected=stillSelected,server=T)
})
id_poligono = reactive({
req(input$mapa_shape_click)
input$mapa_shape_click$id
})
output$grafica = renderImage({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando gif')
if(analisis=="Departamental"){
departamento = id_poligono()
grafica = fx_graficas("DEPARTAMENTO",departamento)
list(src = "outfile.gif",
contentType = 'image/gif') }
if(analisis=="Distrital"){
distrito = id_poligono()
grafica = fx_graficas("DISTRITO",distrito)
list(src = "outfile.gif",
contentType = 'image/gif') }
},deleteFile = TRUE)
output$grafica2 = renderPlot({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando gráfica')
if(analisis=="Departamental"){
departamento = id_poligono()
fx_graficas2("DEPARTAMENTO",departamento)
print("Llegue hasta aca2")}
if(analisis=="Distrital"){
distrito = id_poligono()
fx_graficas2("DISTRITO",distrito)}
})
}
shinyApp(ui = ui, server = server)
# Codigo de servidor
server <- function(input, output,session){
output$mapa <- renderLeaflet({
leaflet() %>%
addTiles(attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
setView( lng = -75.648748 , lat= -9.802423 ,zoom=5)
})
observe({
req(input$Analisis)
analisis = input$Analisis
if(analisis=='Departamental'){
req(input$Departamento)
depart_selecc = input$Departamento
data_selecc = data_depart[data_depart$NOMBDEP %in% depart_selecc,]
metricas = fx_metricas("DEPARTAMENTO",depart_selecc)
data_selecc@data =  data_selecc@data %>% left_join(metricas,by= c("NOMBDEP"="DEPARTAMENTO"))
labels = sprintf(
"<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
metricas$DEPARTAMENTO,
metricas$TOTAL_I,
metricas$FEMENINO_I,
metricas$MASCULINO_I,
metricas$PICO,
metricas$INFECTADOS_AYER,
metricas$TOTAL_F) %>% lapply(htmltools::HTML)
leafletProxy("mapa") %>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 1,
data=data_selecc,
label = labels,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "12px",
direction = "auto"),
layerId = ~NOMBDEP)
}
if(analisis=='Distrital'){
req(input$Distrito)
dist_selecc = input$Distrito
data_selecc = data_distrital[data_distrital$NOMBDIST %in% dist_selecc,]
metricas = fx_metricas("DISTRITO",dist_selecc)
data_selecc@data =  data_selecc@data %>%
left_join(metricas,by= c("NOMBDIST"="DISTRITO"))  %>%
mutate(LABEL=pmap(list(a=NOMBDIST,b=TOTAL_I,c=FEMENINO_I,d=MASCULINO_I,
e=PICO_INF,f=INFECTADOS_AYER,g=TOTAL_F),
function(a,b,c,d,e,f,g){
htmltools::HTML(sprintf("<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
a,b,c,d,e,ifelse(is.na(f),0,f),g))}
))
leafletProxy("mapa") %>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 1,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "12px",
direction = "auto"),
layerId = ~NOMBDIST)
}
})
observe({
provincias = data_distrital@data %>% filter(NOMBDEP %in% input$Departamento) %>%
`$`('NOMBPROV') %>% unique() %>% sort()
stillSelected<-isolate(input$Provincia[input$Provincia %in% provincias])
updateSelectizeInput(session,"Provincia",choices=provincias,
selected=stillSelected,server=T) })
observe({
distritos = data_distrital@data %>% filter(NOMBPROV %in% input$Provincia) %>%
`$`('NOMBDIST') %>% unique() %>% sort()
stillSelected<-isolate(input$Distrito[input$Distrito %in% distritos])
updateSelectizeInput(session,"Distrito",choices=distritos,
selected=stillSelected,server=T)
})
id_poligono = reactive({
req(input$mapa_shape_click)
input$mapa_shape_click$id
})
output$grafica = renderImage({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando gif')
if(analisis=="Departamental"){
departamento = id_poligono()
grafica = fx_graficas("DEPARTAMENTO",departamento)
list(src = "outfile.gif",
contentType = 'image/gif') }
if(analisis=="Distrital"){
distrito = id_poligono()
grafica = fx_graficas("DISTRITO",distrito)
list(src = "outfile.gif",
contentType = 'image/gif') }
},deleteFile = FALSE)
output$grafica2 = renderPlot({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando gráfica')
if(analisis=="Departamental"){
departamento = id_poligono()
fx_graficas2("DEPARTAMENTO",departamento)}
if(analisis=="Distrital"){
distrito = id_poligono()
fx_graficas2("DISTRITO",distrito)}
})
}
shinyApp(ui = ui, server = server)
# Codigo de servidor
server <- function(input, output,session){
output$mapa <- renderLeaflet({
leaflet() %>%
addTiles(attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
setView( lng = -75.648748 , lat= -9.802423 ,zoom=5)
})
observe({
req(input$Analisis)
analisis = input$Analisis
if(analisis=='Departamental'){
req(input$Departamento)
depart_selecc = input$Departamento
data_selecc = data_depart[data_depart$NOMBDEP %in% depart_selecc,]
metricas = fx_metricas("DEPARTAMENTO",depart_selecc)
data_selecc@data =  data_selecc@data %>% left_join(metricas,by= c("NOMBDEP"="DEPARTAMENTO"))
labels = sprintf(
"<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
metricas$DEPARTAMENTO,
metricas$TOTAL_I,
metricas$FEMENINO_I,
metricas$MASCULINO_I,
metricas$PICO,
metricas$INFECTADOS_AYER,
metricas$TOTAL_F) %>% lapply(htmltools::HTML)
leafletProxy("mapa") %>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 1,
data=data_selecc,
label = labels,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "12px",
direction = "auto"),
layerId = ~NOMBDEP)
}
if(analisis=='Distrital'){
req(input$Distrito)
dist_selecc = input$Distrito
data_selecc = data_distrital[data_distrital$NOMBDIST %in% dist_selecc,]
metricas = fx_metricas("DISTRITO",dist_selecc)
data_selecc@data =  data_selecc@data %>%
left_join(metricas,by= c("NOMBDIST"="DISTRITO"))  %>%
mutate(LABEL=pmap(list(a=NOMBDIST,b=TOTAL_I,c=FEMENINO_I,d=MASCULINO_I,
e=PICO_INF,f=INFECTADOS_AYER,g=TOTAL_F),
function(a,b,c,d,e,f,g){
htmltools::HTML(sprintf("<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
a,b,c,d,e,ifelse(is.na(f),0,f),g))}
))
leafletProxy("mapa") %>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 1,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "12px",
direction = "auto"),
layerId = ~NOMBDIST)
}
})
observe({
provincias = data_distrital@data %>% filter(NOMBDEP %in% input$Departamento) %>%
`$`('NOMBPROV') %>% unique() %>% sort()
stillSelected<-isolate(input$Provincia[input$Provincia %in% provincias])
updateSelectizeInput(session,"Provincia",choices=provincias,
selected=stillSelected,server=T) })
observe({
distritos = data_distrital@data %>% filter(NOMBPROV %in% input$Provincia) %>%
`$`('NOMBDIST') %>% unique() %>% sort()
stillSelected<-isolate(input$Distrito[input$Distrito %in% distritos])
updateSelectizeInput(session,"Distrito",choices=distritos,
selected=stillSelected,server=T)
})
id_poligono = reactive({
req(input$mapa_shape_click)
input$mapa_shape_click$id
})
output$grafica = renderImage({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando gif')
if(analisis=="Distrital"){
distrito = id_poligono()
grafica = fx_graficas("DISTRITO",distrito)
list(src = "outfile.gif",
contentType = 'image/gif') }
if(analisis=="Departamental"){
departamento = id_poligono()
grafica = fx_graficas("DEPARTAMENTO",departamento)
list(src = "outfile.gif",
contentType = 'image/gif') }
#
# if(analisis=="Distrital"){
#   distrito = id_poligono()
#   grafica = fx_graficas("DISTRITO",distrito)
#   list(src = "outfile.gif",
#        contentType = 'image/gif') }
},deleteFile = TRUE)
output$grafica2 = renderPlot({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando gráfica')
if(analisis=="Departamental"){
departamento = id_poligono()
fx_graficas2("DEPARTAMENTO",departamento)}
if(analisis=="Distrital"){
distrito = id_poligono()
fx_graficas2("DISTRITO",distrito)}
})
}
shinyApp(ui = ui, server = server)
# Codigo de servidor
server <- function(input, output,session){
output$mapa <- renderLeaflet({
leaflet() %>%
addTiles(attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
setView( lng = -75.648748 , lat= -9.802423 ,zoom=5)
})
observe({
req(input$Analisis)
analisis = input$Analisis
if(analisis=='Departamental'){
req(input$Departamento)
depart_selecc = input$Departamento
data_selecc = data_depart[data_depart$NOMBDEP %in% depart_selecc,]
metricas = fx_metricas("DEPARTAMENTO",depart_selecc)
data_selecc@data =  data_selecc@data %>% left_join(metricas,by= c("NOMBDEP"="DEPARTAMENTO"))
labels = sprintf(
"<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
metricas$DEPARTAMENTO,
metricas$TOTAL_I,
metricas$FEMENINO_I,
metricas$MASCULINO_I,
metricas$PICO,
metricas$INFECTADOS_AYER,
metricas$TOTAL_F) %>% lapply(htmltools::HTML)
leafletProxy("mapa") %>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 1,
data=data_selecc,
label = labels,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "12px",
direction = "auto"),
layerId = ~NOMBDEP)
}
if(analisis=='Distrital'){
req(input$Distrito)
dist_selecc = input$Distrito
data_selecc = data_distrital[data_distrital$NOMBDIST %in% dist_selecc,]
metricas = fx_metricas("DISTRITO",dist_selecc)
data_selecc@data =  data_selecc@data %>%
left_join(metricas,by= c("NOMBDIST"="DISTRITO"))  %>%
mutate(LABEL=pmap(list(a=NOMBDIST,b=TOTAL_I,c=FEMENINO_I,d=MASCULINO_I,
e=PICO_INF,f=INFECTADOS_AYER,g=TOTAL_F),
function(a,b,c,d,e,f,g){
htmltools::HTML(sprintf("<strong>%s</strong><br/>
Infectados totales: %d<br/>
Mujeres: %d<br/>
Hombres: %d<br/>
Pico de infectados: %s<br/>
Infectados ayer: %d <br/>
Fallecidos totales: %d <br/>",
a,b,c,d,e,ifelse(is.na(f),0,f),g))}
))
leafletProxy("mapa") %>%
clearShapes() %>%
addPolygons(stroke = TRUE,
color='black',
weight = 1,
data=data_selecc,
label = ~LABEL,
highlight = highlightOptions(bringToFront = TRUE,
color="red",
weight=3),
labelOptions = labelOptions(
style = list("font-weight"="normal",
padding = "3px 8px"),
textsize = "12px",
direction = "auto"),
layerId = ~NOMBDIST)
}
})
observe({
provincias = data_distrital@data %>% filter(NOMBDEP %in% input$Departamento) %>%
`$`('NOMBPROV') %>% unique() %>% sort()
stillSelected<-isolate(input$Provincia[input$Provincia %in% provincias])
updateSelectizeInput(session,"Provincia",choices=provincias,
selected=stillSelected,server=T) })
observe({
distritos = data_distrital@data %>% filter(NOMBPROV %in% input$Provincia) %>%
`$`('NOMBDIST') %>% unique() %>% sort()
stillSelected<-isolate(input$Distrito[input$Distrito %in% distritos])
updateSelectizeInput(session,"Distrito",choices=distritos,
selected=stillSelected,server=T)
})
id_poligono = reactive({
req(input$mapa_shape_click)
input$mapa_shape_click$id
})
output$grafica = renderImage({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando gif')
if(analisis=="Departamental"){
departamento = id_poligono()
grafica = fx_graficas("DEPARTAMENTO",departamento)
list(src = "outfile.gif",
contentType = 'image/gif') }
else if(analisis=="Distrital"){
distrito = id_poligono()
grafica = fx_graficas("DISTRITO",distrito)
list(src = "outfile.gif",
contentType = 'image/gif') }
},deleteFile = TRUE)
output$grafica2 = renderPlot({
analisis = input$Analisis
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = 'Generando gráfica')
if(analisis=="Departamental"){
departamento = id_poligono()
fx_graficas2("DEPARTAMENTO",departamento)}
else if(analisis=="Distrital"){
distrito = id_poligono()
fx_graficas2("DISTRITO",distrito)}
})
}
shinyApp(ui = ui, server = server)
